{"uuid":"242abe12-3a9e-4a45-975c-2476c965be7d","historyId":"6b33af5cfb87d9decd7886358d229aab","fullName":"usertests.UserTests.validateThatTheUserCanAccessTheUserData","labels":[{"name":"package","value":"usertests.UserTests"},{"name":"testClass","value":"usertests.UserTests"},{"name":"testMethod","value":"validateThatTheUserCanAccessTheUserData"},{"name":"parentSuite","value":"API Suite"},{"name":"suite","value":"CRUD"},{"name":"subSuite","value":"usertests.UserTests"},{"name":"host","value":"192.168.1.6"},{"name":"thread","value":"94394@192.168.1.6.TestNG-test-CRUD-1(22)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"validateThatTheUserCanAccessTheUserData","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"\nExpecting actual:\n  CreateUserModel{firstName = 'test_f',lastName = 'test_l',password = 'passwordfl',userStatus = '1',phone = '010102202021',id = '11',email = 'f@l.com',username = 'testfl'}\nto be equal to:\n  CreateUserModel{firstName = 'test_f',lastName = 'test_l',password = 'passwordfl',userStatus = '10',phone = '010102202021',id = '11',email = 'f@l.com',username = 'testfl'}\nwhen recursively comparing field by field, but found the following difference:\n\nfield/property 'userStatus' differ:\n- actual value  : 1\n- expected value: 10\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\n","trace":"java.lang.AssertionError: \nExpecting actual:\n  CreateUserModel{firstName = 'test_f',lastName = 'test_l',password = 'passwordfl',userStatus = '1',phone = '010102202021',id = '11',email = 'f@l.com',username = 'testfl'}\nto be equal to:\n  CreateUserModel{firstName = 'test_f',lastName = 'test_l',password = 'passwordfl',userStatus = '10',phone = '010102202021',id = '11',email = 'f@l.com',username = 'testfl'}\nwhen recursively comparing field by field, but found the following difference:\n\nfield/property 'userStatus' differ:\n- actual value  : 1\n- expected value: 10\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\n\n\tat usertests.UserTests.validateThatTheUserCanAccessTheUserData(UserTests.java:114)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"arg1","value":"[testfl, 010102202021, 11, 1]"},{"name":"arg0","value":"[test_f, test_l, f@l.com, passwordfl]"}],"start":1746282008823,"stop":1746282009573}