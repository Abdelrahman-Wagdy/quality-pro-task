{"uuid":"4f998be1-c9be-47bf-939c-7f5e1ce878d7","historyId":"dbd4f51bb3cfdfa1d2d2897cadffd99f","fullName":"usertests.UserTests.validateThatTheUserCanAccessTheUserData","labels":[{"name":"package","value":"usertests.UserTests"},{"name":"testClass","value":"usertests.UserTests"},{"name":"testMethod","value":"validateThatTheUserCanAccessTheUserData"},{"name":"parentSuite","value":"API Suite"},{"name":"suite","value":"CRUD"},{"name":"subSuite","value":"usertests.UserTests"},{"name":"host","value":"192.168.1.6"},{"name":"thread","value":"94394@192.168.1.6.TestNG-test-CRUD-1(22)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"validateThatTheUserCanAccessTheUserData","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"\nExpecting actual:\n  CreateUserModel{firstName = 'abdelrahman',lastName = 'wagdy',password = 'password',userStatus = '2',phone = '001122334455',id = '10',email = 'a@b.com',username = 'awagdy'}\nto be equal to:\n  CreateUserModel{firstName = 'abdelrahman',lastName = 'wagdy',password = 'password',userStatus = '10',phone = '001122334455',id = '10',email = 'a@b.com',username = 'awagdy'}\nwhen recursively comparing field by field, but found the following difference:\n\nfield/property 'userStatus' differ:\n- actual value  : 2\n- expected value: 10\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\n","trace":"java.lang.AssertionError: \nExpecting actual:\n  CreateUserModel{firstName = 'abdelrahman',lastName = 'wagdy',password = 'password',userStatus = '2',phone = '001122334455',id = '10',email = 'a@b.com',username = 'awagdy'}\nto be equal to:\n  CreateUserModel{firstName = 'abdelrahman',lastName = 'wagdy',password = 'password',userStatus = '10',phone = '001122334455',id = '10',email = 'a@b.com',username = 'awagdy'}\nwhen recursively comparing field by field, but found the following difference:\n\nfield/property 'userStatus' differ:\n- actual value  : 2\n- expected value: 10\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\n\n\tat usertests.UserTests.validateThatTheUserCanAccessTheUserData(UserTests.java:114)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"arg1","value":"[awagdy, 001122334455, 10, 2]"},{"name":"arg0","value":"[abdelrahman, wagdy, a@b.com, password]"}],"start":1746282008071,"stop":1746282008819}